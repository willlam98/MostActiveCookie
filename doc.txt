    def parse(self, file):
        """
        Parse the input .csv file

        Parameters:
            file (str): input file
        
        Return:
            log_data (list(dict{cookie(str), timestamp(datetime)})):
            list of dictionary of cookie and its timestamp

        Raises:
            ParsingError: File type not matching
            CSVFormatError: raised from in-class private method
        """

    def __validate_row(self, row, row_number):
        """
        Private method used in validating row data from .csv file

        Parameters:
            row (dict{cookie(str), timestamp(str)}): dictionary of cookie
            versus datetime(str)

            row_number (int): current row number in parsing the .csv file

        Returns:
            row (dict{cookie(str), timestamp(datetime)}): dictionary of cookie
            versus datetime(datetime)

        Raises:
            CSVFormatError: timestamp do not following format
        """

    def __validate_fieldnames(self, fieldnames):
        """
        Private method used in validating field names from the .csv file

        Parameters:
            fieldnames (list(str)): list of field names from the input file

        Raises:
            CSVFormatError: log file field names not matching
        """

class CLIParser():
    """
    The CLIParser object contains a command line argument parser

    Attributes:
        cli_parser (argparse.ArgumentParser): command line argument parser

    Methods:
        parse(file, extension): parse the input command
        __check_args(args): check if any arguments are missing
    """

    def parse(self):
        """
        Parse input argument

        Returns:
            args (argparse.Namespace):
                args.file (str): filename
                args.date (str): query date
        """    

    def __check_args(self, args):
        """
        Private method in refining error message from the command line parser

        Returns:
            exit program when any argument is missing
        """

class Parser():
    """
    Base class for (csv) parser

    Attributes:
        FILE_TYPE_NOT_MATCHED_MESSAGE (str): error message when file type not supported by parser
    Methods:
        can_parse_file(file, extension): check if the file extension matches type of parser
    """

    @abstractmethod
    def parse(self, file):
        """
        Abstract method for parser, call when no matching parser available

        Parameters:
            file (str): filename

        Raises:
            ParsingError: no matching parser available
        """

    @staticmethod
    def can_parse_file(file, extension):
        """
        Check if parser can handle the file type

        Parameters:
            file (str): filename
            extension (str): extension type

        Returns:
            bool
        """


def main():
    """
        Main method in finding the most active cookies on a specific day

        Returns:
            print the most active cookies

        Raises:
            ParsingError: File not parse-able
            CSVFormatError: .csv file incorrect fieldnames or timestamp format
            InputError: Any error raised from the input command
    """

    def group_cookies_by_date(self, query_date):
        """
        Return the cookies and its number of occurance on a specific date
        in the form of a dictionary.

        Parameters:
            query_date(datetime.date)

        Return:
            dict{cookie(str), #occurrence(int)}
        """

    def get_daily_most_active_cookies(self, date):
        """
        Returns the cookies that are most active on a given date

        Parameters:
            date(datetime.date): query date

        Return:
            cookies(list(str)): list of most active cookies
        """        